name: Release go Project

on: [push]
# on: 
#   push:
#     # branches:
#     #   -main

#   workflow_dispatch:

env:
  Name: ipchecker

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      date: ${{ steps.date.outputs.today }}
    
    steps:
      
      - name: Get current date
        id: date
        run: echo "::set-output name=today::$(date +'%Y-%m-%d')"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.Name }}_${{ steps.date.outputs.today }}_${{ github.run_id }}
          release_name: ${{ env.Name }}_${{ steps.date.outputs.today }}_${{ github.run_id }}
          draft: false
          prerelease: false
      
      
  build:
    name: Build go
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master # checkout 代码

      - uses: actions/setup-go@v2 # 配置 Go 环境
        with:
          go-version: "1.19" # 改成自己的版本

      - run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./disk/${{ env.Name }}_linux_amd64 main.go # 这 3 条是交叉编译 Go 的指令，酌情修改。
      - run: CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o ./disk/${{ env.Name }}_linux_arm64 main.go
      - run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o ./disk/${{ env.Name }}_windows_amd64.exe main.go
      - run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o ./disk/${{ env.Name }}_darwin_amd64 main.go

      # - name: upload to release
      #   uses: softprops/action-gh-release@v1
      #   with: # 将下述可执行文件 release 上去
      #     files: |
      #       ${{ env.Name }}_linux_amd64
      #       ${{ env.Name }}_linux_arm64
      #       ${{ env.Name }}_windows_amd64.exe
      #       ${{ env.Name }}_darwin_amd64
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./dist/*
          asset_name: *
          asset_content_type: application/gzip